_.keys(object) 

인수의 키들을 모아서 배열로 반환.

_.keys({one: 1, two: 2, three: 3});
=> ["one", "two", "three"]

  _.keys = function(obj) {
     
    // 인수가 오브젝트가 아닌경우 빈배열을 반환.
    if (!_.isObject(obj)) return [];

    // nativeKeys = Object.keys; 가있으묜 적용시켜반환
    if (nativeKeys) return nativeKeys(obj);
    
    var keys = [];
    
    // Object 의 key값으로 obj가 key를가지고있으면 배열에 넣음    
    for (var key in obj) if (_.has(obj, key)) keys.push(key);
    
    //이넘은뭘까...
    if (hasEnumBug) collectNonEnumProps(obj, keys);
     
    return keys;
  };



_.allKeys(object) 

인수의 키값을 모아서(프로토타입까지) 배열로 반환

function Stooge(name) {
  this.name = name;
}
Stooge.prototype.silly = true;
_.allKeys(new Stooge("Moe"));
=> ["name", "silly"]

  _.allKeys = function(obj) {
     
    if (!_.isObject(obj)) return [];
    
    var keys = [];

    for (var key in obj) keys.push(key);
 
    if (hasEnumBug) collectNonEnumProps(obj, keys);

    return keys;
  };



_.values(object) 

인수의 벨류를 배열화해서 돌려줌다

_.values({one: 1, two: 2, three: 3});
=> [1, 2, 3]

 _.values = function(obj) {
    // 키값만 담고 있는 배열을 받슴다.
    var keys = _.keys(obj);
    // 키갯수만큼 만큼 길이를 받는다.
    var length = keys.length;
    // 해당길이 만큼의 배열을만든당
    var values = Array(length);
    // 돌린당! obj의 ~째키의 값부터 찾아가지고!! 벤뉴배열에넣는당!
    for (var i = 0; i < length; i++) {
      values[i] = obj[keys[i]];
    }
    //구로묜 밴뉴의값만가진 밴뉴즈배열이 만들어진당!!
    return values;
  };


_.mapObject(object, iteratee, [context]) 

첫번째 인수의 각 값이 두번째 인수의 함수를 실행해서 나온 키,밸류 를 반환한다.

_.mapObject({start: 5, end: 12}, function(val, key) {
  return val + 5;
});
=> {start: 10, end: 17}

  _.mapObject = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);

    var keys =  _.keys(obj),
          length = keys.length,
          results = {},
          currentKey;

      for (var index = 0; index < length; index++) {
        // index번째의 키를 받는다! results의 키값으로 주기위해!
        currentKey = keys[index];
        results[currentKey] = iteratee(obj[currentKey], currentKey, obj);
      }
      return results;
  };


_.pairs(object) 

_.pairs({one: 1, two: 2, three: 3});
=> [["one", 1], ["two", 2], ["three", 3]]

  _.pairs = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var pairs = Array(length);
    for (var i = 0; i < length; i++) {
      pairs[i] = [keys[i], obj[keys[i]]];
    }
    return pairs;
  };



invert_.invert(object) 

키값을 밸류로 밸류를 키값으로 바꾼 배열을 반환

_.invert({Moe: "Moses", Larry: "Louis", Curly: "Jerome"});
=> {Moses: "Moe", Louis: "Larry", Jerome: "Curly"};

  _.invert = function(obj) {
    var result = {};
    var keys = _.keys(obj);
    for (var i = 0, length = keys.length; i < length; i++) {
      result[obj[keys[i]]] = keys[i];
    }
    return result;
  };