- create
제 1 인수를 프로토 타입으로하는 신규 Object에 제 2 인자의 특성을 모두 복사 (프로토 타입 제외)하고 반환하는 함수.

var moe = _.create(Stooge.prototype, {name: "Moe"});


  // Creates an object that inherits from the given prototype object.
  // If additional properties are provided then they will be added to the
  // created object.
  _.create = function(prototype, props) {
    var result = baseCreate(prototype);
　　// props 추가로 넣고싶은 값이 있으면 넣음
    if (props) _.extendOwn(result, props);
    return result;
  };


  // An internal function for creating a new object that inherits from another.
  var baseCreate = function(prototype) {
    // 넘겨받은 prototype이 오브젝트가 아니면 빈 오브젝트 넘김
    if (!_.isObject(prototype)) return {};
    //nativeCreate = Object.create; 큰 오브젝트의 create가 있으면 자바스크립트의 create기본 함수 사용
    //function create() { [native code] }
    if (nativeCreate) return nativeCreate(prototype);
    //둘다 아니면, 언더스코어에서 사용하는 로컬 변수, var Ctor = function(){};
    Ctor.prototype = prototype;
    var result = new Ctor;
    Ctor.prototype = null;
    return result;
  };

--------------------------------------------------------------------------------

//object가 가지고 있는 메소드 이름들을 리스트로 만들어서 넘김, 별칭methods
- functions
// Return a sorted list of the function names available on the object.
  // Aliased as `methods`.

  _.functions = _.methods = function(obj) {
    var names = [];
    for (var key in obj) {
      if (_.isFunction(obj[key])) names.push(key);
    }
    //이름 순서대로 오름차순 시켜서 리턴
    return names.sort();
  };

--------------------------------------------------------------------------------

- findKey
//findIndex랑 유사, 제 1 인자 'Object'의 값에서 제 2 인수 함수의 조건을 충족하는 최초의 key 값이 반환된다.
  // Returns the first key on an object that passes a predicate test.
  _.findKey = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    //Object의 key값만 배열을 작성.로컬 변수 key의 선언.
    var keys = _.keys(obj), key;
    for (var i = 0, length = keys.length; i < length; i++) {
      key = keys[i];
      if (predicate(obj[key], key, obj)) return key;
    }
  };

--------------------------------------------------------------------------------
제 2 인수 "Object"에 포함되어있는 모든 속성 (프로토 타입을 포함한다)을 제 1 인자 "Object"에 복사 한 것을 돌려 준다.
_.extend({name: 'moe'}, {age: 50});
=> {name: 'moe', age: 50}

- extend
// Extend a given object with all the properties in passed-in object(s).
  _.extend = createAssigner(_.allKeys);

  // An internal function for creating assigner functions.
  var createAssigner = function(keysFunc, defaults) {
    return function(obj) {
      var length = arguments.length;
      //defaults가 있으면 오브젝트에 default를 넣음
      if (defaults) obj = Object(obj);
      //argument가 없거나  obj도 없으면 null리턴
      if (length < 2 || obj == null) return obj;
      // arguments길이만큼 반복
      for (var index = 1; index < length; index++) {
        var source = arguments[index],
            keys = keysFunc(source),
            l = keys.length;
        //argument의 키값 만큼 또 반복
        for (var i = 0; i < l; i++) {
          var key = keys[i];
          // obj[key]값이 undef이 아니면, obj에 넣음
          if (!defaults || obj[key] === void 0) obj[key] = source[key];
        }
      }
      return obj;
    };
  };


  _.allKeys = function(obj) {
    if (!_.isObject(obj)) return [];
    var keys = [];
    for (var key in obj) keys.push(key);
    // Ahem, IE < 9.
    if (hasEnumBug) collectNonEnumProps(obj, keys);
    return keys;
  };

 // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.
  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');
오!브젝트가 가지고 있는 속성
  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',
                      'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];

  var collectNonEnumProps = function(obj, keys) {
    //오!브젝트가 가지고 있는 속성이 몇개인지 저장
    var nonEnumIdx = nonEnumerableProps.length;
    // 객체의 초기화에 사용 된 생성자 함수를 참조하는 constructor 속성
    var constructor = obj.constructor;
    // obj의 프로토타입이 있으면 저장, 없으면 오!브젝트의 프로토타입을 저장
    var proto = _.isFunction(constructor) && constructor.prototype || ObjProto;

    // Constructor is a special case.
    var prop = 'constructor';
    // obj에 constructor(프로토 타입을 만든 Object함수의 참조)가 있는지 확인해서 constructor추가 넣어줌
    if (_.has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);

    while (nonEnumIdx--) {
      //프로토타입이 가지고 있는 키값과 오!브젝트의 키값을 비교해서, 프로토타입이 가지고 있는 오!브젝트의 속성을 넣어줌.
      prop = nonEnumerableProps[nonEnumIdx];
      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {
        keys.push(prop);
      }
    }
  };


--------------------------------------------------------------------------------
//prototype을 제외한 2번째 obj가 가진 모든 요소를 1번째 obj에 합쳐서 리턴
- extendOwn
  // Assigns a given object with all the own properties in the passed-in object(s).
  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)
  _.extendOwn = _.assign = createAssigner(_.keys);

--------------------------------------------------------------------------------
//1번째 이후에 지정한 원소에 맞는 키와 값으로 구성된 새로운 오브젝트를 리턴
_.pick({name: 'moe', age: 50, userid: 'moe1'}, 'name', 'age');
=> {name: 'moe', age: 50}
_.pick({name: 'moe', age: 50, userid: 'moe1'}, function(value, key, object) {
  return _.isNumber(value);
});
=> {age: 50}
- pick
// Return a copy of the object only containing the whitelisted properties.

  _.pick = restArgs(function(obj, keys) {
    var result = {}, iteratee = keys[0];
    if (obj == null) return result;
    //두번째 파라메타가 펑션인지 확인
    if (_.isFunction(iteratee)) {
      if (keys.length > 1) iteratee = optimizeCb(iteratee, keys[1]);
      keys = _.allKeys(obj);
    } else {
      //그 외에는 keyInObj를 이용
      iteratee = keyInObj;
      keys = flatten(keys, false, false);
      obj = Object(obj);
    }
    // obj의 키수만큼 반복
    for (var i = 0, length = keys.length; i < length; i++) {
      var key = keys[i];
      var value = obj[key];
      if (iteratee(value, key, obj)) result[key] = value;
    }
    return result;
  });

pick기본 함수
in연산자 는 지정된 속성이 지정된 개체에있는 경우 true를 반환합니다.
  var keyInObj = function(value, key, obj) {
    return key in obj;
  };

--------------------------------------------------------------------------------
// pick이랑 반대, 2번째 인자 이후 파라메타를 제외한 값을 넘김. 2번째값은 키, 함수가 올수 있음
_.omit({name: 'moe', age: 50, userid: 'moe1'}, 'userid');
=> {name: 'moe', age: 50}
_.omit({name: 'moe', age: 50, userid: 'moe1'}, function(value, key, object) {
  return _.isNumber(value);
});
=> {name: 'moe', userid: 'moe1'}

- omit
  // Return a copy of the object without the blacklisted properties.
  _.omit = restArgs(function(obj, keys) {
    var iteratee = keys[0], context;
    if (_.isFunction(iteratee)) {
      //iteratee 함수의 결과값을 다 부정해서 리턴
      iteratee = _.negate(iteratee);
      if (keys.length > 1) context = keys[1];
    } else {
      //중첩배열을 병합해서, JS에서 object의 key는 String 형 
      keys = _.map(flatten(keys, false, false), String);
      // 기본은 contains (＝＝＝비교) 의 부정
      iteratee = function(value, key) {
        return !_.contains(keys, key);
      };
    }
    return _.pick(obj, iteratee, context);
  });

  //부정하는 함수
  // Returns a negated version of the passed-in predicate.
  _.negate = function(predicate) {
    return function() {
      return !predicate.apply(this, arguments);
    };
  };