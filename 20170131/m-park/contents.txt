ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
first_.first(array, [n]) Aliases: head, take 
_.first([5, 4, 3, 2, 1]);
=> 5
  //array의 첫번째 요소를 리턴한다. n이 있으면 n만큼 배열로 리턴한다. 
  _.first = _.head = _.take = function(array, n, guard) {
    // array가 없거나, array크기가 0이면 undefined 를 리턴, void 0 은 javascript에서 undefined 를 리턴하는 함수
    if (array == null || array.length < 1) return void 0;
    if (n == null || guard) return array[0];
    return _.initial(array, array.length - n);
  };

ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

initial_.initial(array, [n]) 
Returns everything but the last entry of the array. Especially useful on the arguments object. Pass n to exclude the last n elements from the result.
//처음부터 n만큼 리턴
_.initial([5, 4, 3, 2, 1]);
=> [5, 4, 3, 2]
// 마지막 요소를 제외하고 배열로 리턴
  _.initial = function(array, n, guard) {
    // guard 가 있으면 마지막 요소 제외하고 리턴
    // n이 값이 있으면 array.length - n 만큼 array를 만들어서 리턴
    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
  };

ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
// 배열의 마지막 요소를 리턴, n이 있으면 뒤에서 n만큼 리턴
last_.last(array, [n]) 
Returns the last element of an array. Passing n will return the last n elements of the array.

_.last([5, 4, 3, 2, 1]);
=> 1

  _.last = function(array, n, guard) {
    if (array == null || array.length < 1) return void 0;
    if (n == null || guard) return array[array.length - 1];
    return _.rest(array, Math.max(0, array.length - n));
  };


ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
// 꼬리 함수. 뒷부분을 잘라서 넘겨줌 n부터 끝까지
_.rest([5, 4, 3, 2, 1]);
=> [4, 3, 2, 1]

  _.rest = _.tail = _.drop = function(array, n, guard) {
    //n으로 시작위치를 지정
    return slice.call(array, n == null || guard ? 1 : n);
  };

ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
// 배열 안의 falsy 값 (false, null, 0, "", undefined, NaN)를 제외하고 반환한다.
_.compact([0, 1, false, 2, '', 3]);
=> [1, 2, 3]
  _.compact = function(array) {
    //Boolean함수, 넘겨받는 값이 불린이면 true, 아니면 false 
    //filter함수 넘겨받는 조건함수에 따라서 그 조건에 맞는 값들만 추출
    return _.filter(array, Boolean);
  };


  _.filter = _.select = function(obj, predicate, context) {
    var results = [];
    predicate = cb(predicate, context);
    _.each(obj, function(value, index, list) {
      if (predicate(value, index, list)) results.push(value);
    });
    return results;
  };



ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
//다차원 배열을 1차원으로 만듬
flatten_.flatten(array, [shallow]) 
_.flatten([1, [2], [3, [[4]]]]);
=> [1, 2, 3, 4];

_.flatten([1, [2], [3, [[4]]]], true);
=> [1, 2, 3, [[4]]];


  // Internal implementation of a recursive `flatten` function.
  //해당 파라메타로 밑의 함수가 실행된다
  return flatten(array, shallow, false);

  var flatten = function(input, shallow, strict, output) {
    //output 이 있으면 output에 넣고, 없으면 빈 array를 생성, 현재 flatten에서는 빈 어레이
    output = output || [];
    var idx = output.length;
    //1차원 배열로 변경할 함수의 길이를 구해서 반복함.
    for (var i = 0, length = getLength(input); i < length; i++) {
      var value = input[i];
      // 반복한 value값이 array인지(다차원 배열인지확인)
      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {
        // shallow가 true이면 1차원씩만 제거, 아니면 전부다 1차원으로 만듬
        if (shallow) {
          //한차원씩만 제거하는 반복문
          var j = 0, len = value.length;
          while (j < len) output[idx++] = value[j++];
        } else {
          //재귀함수 이용. 1차원 배열로 만들게됨 (value가 배열이 output 객체로 들어가게됨)
          flatten(value, shallow, strict, output);
          //들어간 만큼 index값을 변경
          idx = output.length;
        }
      } else if (!strict) {
        //value가 어레이값이 아닐 경우 그냥 넣음
        output[idx++] = value;
      }
    }
    return output;
  };

  // Flatten out an array, either recursively (by default), or just one level.
  _.flatten = function(array, shallow) {
    return flatten(array, shallow, false);
  };


ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
values를 제거한 배열을 돌려 준다. === 연산자 로 비교된다
without_.without(array, *values) 
Returns a copy of the array with all instances of the values removed.
_.without([1, 2, 1, 0, 3, 1, 4], 0, 1);
=> [2, 3, 4]
  // array에서 otherArray이외의 값을 리턴시킴.
  _.without = restArgs(function(array, otherArrays) {
    return _.difference(array, otherArrays);
  });

//call, apply로 function의 this확인
  var restArgs = function(func, startIndex) {
    startIndex = startIndex == null ? func.length - 1 : +startIndex;
    return function() {
      var length = Math.max(arguments.length - startIndex, 0),
          rest = Array(length),
          index = 0;
      for (; index < length; index++) {
        rest[index] = arguments[index + startIndex];
      }
      switch (startIndex) {
        case 0: return func.call(this, rest);
        case 1: return func.call(this, arguments[0], rest);
        case 2: return func.call(this, arguments[0], arguments[1], rest);
      }
      var args = Array(startIndex + 1);
      for (index = 0; index < startIndex; index++) {
        args[index] = arguments[index];
      }
      args[startIndex] = rest;
      return func.apply(this, args);
    };
  };