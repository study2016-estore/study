ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
first_.first(array, [n]) Aliases: head, take 
_.first([5, 4, 3, 2, 1]);
=> 5
  //array의 첫번째 요소를 리턴한다. n이 있으면 n만큼 배열로 리턴한다. 
  _.first = _.head = _.take = function(array, n, guard) {
    // array가 없거나, array크기가 0이면 undefined 를 리턴, void 0 은 javascript에서 undefined 를 리턴하는 함수
    if (array == null || array.length < 1) return void 0;
    if (n == null || guard) return array[0];
    return _.initial(array, array.length - n);
  };

ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

initial_.initial(array, [n]) 
Returns everything but the last entry of the array. Especially useful on the arguments object. Pass n to exclude the last n elements from the result.
//처음부터 n만큼 리턴
_.initial([5, 4, 3, 2, 1]);
=> [5, 4, 3, 2]
// 마지막 요소를 제외하고 배열로 리턴
  _.initial = function(array, n, guard) {
    // guard 가 있으면 마지막 요소 제외하고 리턴
    // n이 값이 있으면 array.length - n 만큼 array를 만들어서 리턴
    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
  };

ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
// 배열의 마지막 요소를 리턴, n이 있으면 뒤에서 n만큼 리턴
last_.last(array, [n]) 
Returns the last element of an array. Passing n will return the last n elements of the array.

_.last([5, 4, 3, 2, 1]);
=> 1

  _.last = function(array, n, guard) {
    if (array == null || array.length < 1) return void 0;
    if (n == null || guard) return array[array.length - 1];
    return _.rest(array, Math.max(0, array.length - n));
  };


ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
// 꼬리 함수. 뒷부분을 잘라서 넘겨줌 n부터 끝까지
_.rest([5, 4, 3, 2, 1]);
=> [4, 3, 2, 1]

  _.rest = _.tail = _.drop = function(array, n, guard) {
    //n으로 시작위치를 지정
    return slice.call(array, n == null || guard ? 1 : n);
  };

ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
// 배열 안의 falsy 값 (false, null, 0, "", undefined, NaN)를 제외하고 반환한다.
_.compact([0, 1, false, 2, '', 3]);
=> [1, 2, 3]
  _.compact = function(array) {
    //Boolean함수, 넘겨받는 값이 불린이면 true, 아니면 false 
    //filter함수 넘겨받는 조건함수에 따라서 그 조건에 맞는 값들만 추출
    return _.filter(array, Boolean);
  };


  _.filter = _.select = function(obj, predicate, context) {
    var results = [];
    predicate = cb(predicate, context);
    _.each(obj, function(value, index, list) {
      if (predicate(value, index, list)) results.push(value);
    });
    return results;
  };



ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

flatten_.flatten(array, [shallow]) 
Flattens a nested array (the nesting can be to any depth). If you pass shallow, the array will only be flattened a single level.

_.flatten([1, [2], [3, [[4]]]]);
=> [1, 2, 3, 4];

_.flatten([1, [2], [3, [[4]]]], true);
=> [1, 2, 3, [[4]]];


ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
without_.without(array, *values) 
Returns a copy of the array with all instances of the values removed.
_.without([1, 2, 1, 0, 3, 1, 4], 0, 1);
=> [2, 3, 4]