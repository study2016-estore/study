[ _.findIndex ]
_.findIndex(array, predicate, [context])
첫번째 인수 배열의 값중에서 , 두번째 인수의 조건을 만족하고 있는 제일 처음의 값의 인덱스를 반환 한다.

_.findIndex = createPredicateIndexFinder(1);

  function createPredicateIndexFinder(dir) {
    return function(array, predicate, context) {
      predicate = cb(predicate, context);

      //array의 길이를 구한다.
      var length = getLength(array);

      //dir가 1로넘어오면 첫번째 인덱스 0부터시작 -1이면 마지막인덱스부터시작
      var index = dir > 0 ? 0 : length - 1;

      //predicate에 array[index] -> 값 과 index , array를 넘겨줘서 만족하는 값이 나오면 return
      for (; index >= 0 && index < length; index += dir) {
        if (predicate(array[index], index, array)) return index;
      }
     //for문을 다돌았는데도 return되는값이 없으면 만족하는 값이 없으므로 -1을 리턴
      return -1;
    };
  }

 var getLength = property('length');
  var property = function(key) {
    return function(obj) {
      return obj == null ? void 0 : obj[key];
    };
  };
  

[ sortedIndex ]
_.sortedIndex(list, value, [iteratee], [context]) 
첫번째 인수(정렬이되어있는배열) 배열에 두번째 인수의 값이 정렬순서로 들어갈수있는 위치의 인덱스를 반환.

  _.sortedIndex = function(array, obj, iteratee, context) {
    //_.property(value)를 반환받음
    //return function(obj) { return obj == null? void 0 : obj['age']}
    iteratee = cb(iteratee, context, 1);

    //끼워넣을 obj의 age값을 취득후 value에 대입
    var value = iteratee(obj);

    // high는 배열길이 (2)
    var low = 0, high = getLength(array);

    //
    while (low < high) {
     //mid = 1 , mid = 0 
      var mid = Math.floor((low + high) / 2);
     //{name: 'curly', age: 60} , {name: 'moe', age: 40}
     // low = 0 high=1 , low = 1 high = 1
      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;
    }
    return low;
  };

  var cb = function(value, context, argCount) {
    // _.identity = function(value) { return value; };
    if (value == null) return _.identity;
    
    // 함수인경우 context있으면 
    // case 1: return function(value) { return func.call(context, value); };
    if (_.isFunction(value)) return optimizeCb(value, context, argCount);
    
    // Object인경우 키:벨류 값이같은게 있는지 판단하는 매쳐반환
    if (_.isObject(value)) return _.matcher(value);
    
    // 함수도 Object도아닌 경우
    return _.property(value);
  };
  

indexOf 
예 ) 8,8,8,8,8,8,8,8,8,8
sort가 -4 면 
시작할 인덱스값 = 길이 + sortr값
8,8,8,8,8,8,[8,8,8,8]<- 얘들안에서 제일처음 값을 확인
sort가 4 면 
시작할 인덱스값 = sort
8,8,8,8,[8,8,8,8,8,8]<- 얘들안에서 제일처음 값을 확인

lastIndexOf 
예 ) 8,8,8,8,8,8,8,8,8,8
sort가 -4 면 
0 부터 ? 까지 = 길이 + sort값 까지
[8,8,8,8,8,8,8],8,8,8<- 얘들안에서 제일처음 값을 확인
sort가 4 면 
0부터 ? 까지 = sort값 까지
[8,8,8,8,8],8,8,8,8,8<- 얘들안에서 제일 마지막 값을 확인


[ _.indexOf ]
_.indexOf(array, value, [isSorted]) 
첫번째 인수 (array)에 두번째인수의 값이 포함되어 있을때 첫번째인수의 배열 index를 반환.(해당값이 있는 제일처음의 인덱스를반환)
 
_.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);
_.lastIndexOf = createIndexFinder(-1, _.findLastIndex);
 
  function createIndexFinder(dir, predicateFind, sortedIndex) {
    return function(array, item, idx) {
      // length = array의길이
      var i = 0, length = getLength(array);
 
      //세번째 인수 isSorted 가 숫자이면
      if (typeof idx == 'number') {
        //dir 가 1 이면
        if (dir > 0) {
            // idx가 0이상이면 idx를 아니면 음수 + 길이 한값을 i값으로해서 i부터 값을 확인해서 인덱스를 돌려주도록한다.
            // Math.max() 두 식 중 더 큰 값을 가져온다
            i = idx >= 0 ? idx : Math.max(idx + length, i);
        } else {
            //dir -1 이면
           // 0 부터 어디까지 확인 할건지 length를 정한다
            length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;
        } //indexOf일때 sort값이 숫자가 아니고 true이면 여기를 실행
      } else if (sortedIndex && idx && length) {
        // 끼일수있는 자리 = 값이 같은자리의 인덱스 또는 자신보다 큰값을 가진 자리의 인덱스
        idx = sortedIndex(array, item);
        // 돌아온 인덱스의 배열값이 item값과 같으면 해당 인덱스를 반환 아니면 해당값과 같은값을 가진 배열이 없으므로 -1 반환
        return array[idx] === item ? idx : -1;
      }
 
      //
      if (item !== item) {
        //위에서지정한 i 부터 length까지의 배열을 만들어 
        idx = predicateFind(slice.call(array, i, length), _.isNaN);
        return idx >= 0 ? idx + i : -1;
      }
      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {
        if (array[idx] === item) return idx;
      }
      return -1;
    };
  }

  //item값이 NaN인지 아닌지 체크
      if (item !== item) {
        //위에서지정한 i 부터 length까지의 배열을 만들어 
        idx = predicateFind(slice.call(array, i, length), _.isNaN);
        return idx >= 0 ? idx + i : -1;
      }

[ _.range ]
_.range([start], stop, [step]) 
첫번째 인수부터 두번째인수의 -1 까지 숫자가들어간 배열을 반환.
 
  _.range = function(start, stop, step) {
    if (stop == null) {
      // start가 false이면 stop = 0
      stop = start || 0;
      start = 0;
    }
    //step이 false이면 step=1
    step = step || 1;

    //~까지 반복해야할지 length를 구한다.
    var length = Math.max(Math.ceil((stop - start) / step), 0);
    //length만큼의 배열을 만든다.
    var range = Array(length);

    for (var idx = 0; idx < length; idx++, start += step) {
      range[idx] = start;
    }

    return range;
  };
http://qiita.com/ikasumi_wt/items/8c4fe94c42079eb98c7b
