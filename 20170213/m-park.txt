//함수가 많이 불리는 것을 제한함, 지정된 수 만큼 함수 를 부르고 결과값을 리턴시키게 됨.

 // Returns a function that will only be executed up to (but not including) the Nth call.
var monthlyMeeting = _.before(3, askForRaise);
monthlyMeeting();
monthlyMeeting();
monthlyMeeting();
// the result of any subsequent calls is the same as the second call
  _.before = function(times, func) {
    var memo;
    return function() {
      //시간이 0 보다 클 때 함수를 호출, 호출될때마다 -- 가 됨
      if (--times > 0) {
        memo = func.apply(this, arguments);
      }
      // 시간이 1 이하인 경우에는 널
      if (times <= 1) func = null;
      return memo;
    };
  };

  // Returns the first function passed as an argument to the second,
  // allowing you to adjust arguments, run code before and after, and
  // conditionally execute the original function.
 // func에 wrapper 를 전달한 함수를 반환
 /* 예제
    var hello = function(name) { return "hello: " + name; };
    hello = _.wrap(hello, function(func) {
        return "before, " + func("moe") + ", after";
    });
    hello();
     => 'before, hello: moe, after' */

예제2, func 첫번째 함수는 초기화 되지 않고 계속 존재중
var i = 0;
function logged( txt ){
	var text = txt ? txt : "test";
	text = text + " " + i;
	i++;
	return text;
}
var re = _.wrap( logged, function(func) {
  var text = func("logged関数") + " is wrapped ";
  console.log( text );
});
// logged関数 0 is wrapped
re();
// logged関数 1 is wrapped
re();


  _.wrap = function(func, wrapper) {
    // 위에 나온 partial을 사용...
    return _.partial(wrapper, func);
  };



_.partial
var subtract = function( a, b ){
	return a - b;
}
var sub5 =  _.partial( subtract, 5 );
var subForm20 =  _.partial( subtract, _, 20 );

// re = -15;
var re = sub5( 20 );

// re2 = -15;
var re2 = subForm20( 5 );
제 1 인수 "함수"에 제 2 인수 이후 인수로 부분 적용한 함수를 돌려 준다.















  // 함수를 실행시킨 후 결과값을 부정하여 값을 리턴시킴
  // Returns a negated version of the passed-in predicate.
  _.negate = function(predicate) {
    return function() {
      return !predicate.apply(this, arguments);
    };
  };

 // Returns a function that is the composition of a list of functions, each
  // consuming the return value of the function that follows.
 // 함수 뒤에서부터 실행해서 전부 실행시킨 결과값을 리턴시켜주는 함수.
var greet = function(name){ 
	return "hi: " + name;
};
var exclaim = function(statement){ 
	return statement.toUpperCase() + "!";
};
var welcome = _.compose( greet, exclaim );

// "hi: MOE!" 
console.log( welcome("moe") );

  _.compose = function() {
    var args = arguments;
    var start = args.length - 1;
    return function() {
      var i = start;
      // 마지막 함수를 실행시킴
      var result = args[start].apply(this, arguments);
      // while로 뒤에서부터 실행시킴, 결과값을 리절트에 넣음.
      while (i--) result = args[i].call(this, result);
      //마지막에 실행되고 남은 결과값을 리턴시킴
      return result;
    };
  };

// _ 이 문자는 초기화 시키고, Underscore 개체에 대한 참조를 반환 합니다.
  _.noConflict = function() {
    root._ = previousUnderscore;
    // this는 Underscore
    return this;
  };

  var root = typeof self == 'object' && self.self === self && self ||
            typeof global == 'object' && global.global === global && global ||
            this ||
            {};

  // `_` 변수의 이전 값을 저장합니다.
  var previousUnderscore = root._;

   // 인수로 사용 된 것과 동일한 값을 리턴
  // Keep the identity function around for default iteratees.
  _.identity = function(value) {
    return value;
  };

  // 상수값 리턴 
  var stooge = {name : 'moe'};
   stooge === _.constant (stooge) ();
    => true <- stooge 얘를 리턴시켜서 비교하고있으니까, 완벽하게 동일하기 때문에 트루
  // Predicate-generating functions. Often useful outside of Underscore.
  _.constant = function(value) {
    return function() {
      return value;
    };
  };
  // 공란의 함수를 리턴시킴, undef
  _.noop = function(){};


  // Run a function **n** times.
  // 함수를 n번만큼 호출해서 결과값은 호출한 만큼 배열을 만들어서 리턴시킴
  function call( txt ){
	console.log( txt );
  };
   // 콜을 6번 호출함。
    var re = _.times( 6, call );

  _.times = function(n, iteratee, context) {
    var accum = Array(Math.max(0, n));
    iteratee = optimizeCb(iteratee, context, 1);
    // 해당함수를 n만큼 실행시킴, 결과값을 accum에 저장
    for (var i = 0; i < n; i++) accum[i] = iteratee(i);
    return accum;
  };


  // 최소값과 최대값을 지정해서 그 사이의 랜덤수를 리턴시킴
  // Return a random integer between min and max (inclusive).
  _.random = function(min, max) {
    if (max == null) {
      max = min;
      min = 0;
    }
    // Math.random()이 0 이상 1 미만 의 범위에서 난수를 반환합니다. 
    // Java와 마찬가지로, 현재 시간을 시드로 난수를 생성합니다.
    // 최소값 + 지정된 숫자 최대 정수값(랜덤값 * （이부분이 정수로 만들어주는 부분） )
    return min + Math.floor(Math.random() * (max - min + 1));
  };